<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.liferay.faces.portal</groupId>
		<artifactId>liferay-faces-portal-parent</artifactId>
		<version>3.0.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<groupId>com.liferay.faces.portal.demos</groupId>
	<artifactId>liferay-faces-portal-demos</artifactId>
	<packaging>pom</packaging>
	<name>Liferay Faces Portal Demos</name>

	<modules>
		<module>jsf-ds-applicant-portlet</module>
		<module>jsf-login-portlet</module>
		<module>jsf-registration-portlet</module>
		<module>primefaces-users-portlet</module>
		<module>portal-showcase-portlet</module>
	</modules>

	<profiles>
		<profile>
			<id>integration</id>
			<properties>
				<integration.browser>phantomjs</integration.browser>
				<integration.log.level>WARNING</integration.log.level>
				<integration.container>tomcat</integration.container>
				<integration.host>localhost</integration.host>
				<integration.port>8080</integration.port>
				<integration.base.url>http://${integration.host}:${integration.port}</integration.base.url>
				<integration.context>/${project.artifactId}-${project.version}/web/guest/showcase/-/component/h/</integration.context>
				<integration.sign.in.context></integration.sign.in.context>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<systemPropertyVariables>
								<runningWithMavenSurefirePlugin>true</runningWithMavenSurefirePlugin>
								<integration.browser>${integration.browser}</integration.browser>
								<integration.log.level>${integration.log.level}</integration.log.level>
								<integration.container>${integration.container}</integration.container>
								<integration.host>${integration.host}</integration.host>
								<integration.port>${integration.port}</integration.port>
								<integration.context>${integration.context}</integration.context>
								<integration.sign.in.context>${integration.sign.in.context}</integration.sign.in.context>
							</systemPropertyVariables>
							<properties>
								<property>
									<name>listener</name>
									<value>com.liferay.faces.test.IntegrationTestSuiteListener</value>
								</property>
							</properties>
							<includes>
								<include>**/*Test.java,**/Test*.java,**/*TestCase.java,**/*Tester.java</include>
							</includes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>licenses</id>
			<properties>
				<licenses.output.dir>${project.basedir}/src/main/resources/META-INF</licenses.output.dir>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>license-maven-plugin</artifactId>
						<version>1.5</version>
						<configuration>
							<deployMissingFile>false</deployMissingFile>
							<excludedGroups>com.liferay.faces</excludedGroups>
							<excludedLicenses>GPL|GPLv1|GPLv2|GPLv3</excludedLicenses>
							<failIfWarning>true</failIfWarning>
							<includedScopes>compile</includedScopes>
							<licensesConfigFile>${project.basedir}/src/main/resources/META-INF/third-party-missing.xml</licensesConfigFile>
							<licensesOutputDirectory>${licenses.output.dir}</licensesOutputDirectory>
							<licensesOutputFile>${project.build.directory}/licenses.xml</licensesOutputFile>
							<missingFile>${project.basedir}/src/main/resources/META-INF/third-party-missing.properties</missingFile>
							<outputDirectory>${licenses.output.dir}</outputDirectory>
							<thirdPartyFilename>THIRD-PARTY.txt</thirdPartyFilename>
							<useMissingFile>true</useMissingFile>
							<useRepositoryMissingFiles>false</useRepositoryMissingFiles>
						</configuration>
						<executions>
							<execution>
								<id>third-party-licenses</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>add-third-party</goal>
									<goal>download-licenses</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<phase>generate-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.plugin.classpath" />
										<delete failonerror="false" verbose="true">
											<fileset dir="${licenses.output.dir}" includes="*apache*2.0*.php" />
										</delete>
										<for param="licenseFile">
											<fileset dir="${licenses.output.dir}" includes="*apache*2.0*.txt" />
											<sequential>
												<move file="@{licenseFile}" tofile="${licenses.output.dir}/apache-2.0.txt" />
											</sequential>
										</for>
										<for param="licenseFile">
											<fileset dir="${licenses.output.dir}" includes="*bouncy*.html" />
											<sequential>
												<move file="@{licenseFile}" tofile="${licenses.output.dir}/bouncy-castle.html" />
											</sequential>
										</for>
										<for param="licenseFile">
											<fileset dir="${licenses.output.dir}" includes="*cddl+gpl*.html" />
											<sequential>
												<move file="@{licenseFile}" tofile="${licenses.output.dir}/cddl-1.0-gpl-2.0-cp.txt" />
											</sequential>
										</for>
										<for param="licenseFile">
											<fileset dir="${licenses.output.dir}" includes="*common*cddl*.*" />
											<sequential>
												<move file="@{licenseFile}" tofile="${licenses.output.dir}/cddl-1.0.txt" />
											</sequential>
										</for>
										<for param="licenseFile">
											<fileset dir="${licenses.output.dir}" includes="*lgpl*2.1*.txt" />
											<sequential>
												<move file="@{licenseFile}" tofile="${licenses.output.dir}/lgpl-2.1.txt" />
											</sequential>
										</for>
										<for param="licenseFile">
											<fileset dir="${licenses.output.dir}" includes="*lgpl*2.1*.html" />
											<sequential>
												<move file="@{licenseFile}" tofile="${licenses.output.dir}/lgpl-2.1.html" />
											</sequential>
										</for>
										<for param="licenseFile">
											<fileset dir="${licenses.output.dir}" includes="*lesser*.txt" />
											<sequential>
												<move file="@{licenseFile}" tofile="${licenses.output.dir}/lgpl-3.txt" />
											</sequential>
										</for>
										<for param="licenseFile">
											<fileset dir="${licenses.output.dir}" includes="*mpl-1.1*.html" />
											<sequential>
												<move file="@{licenseFile}" tofile="${licenses.output.dir}/mpl-1.1.html" />
											</sequential>
										</for>
										<for param="licenseFile">
											<fileset dir="${licenses.output.dir}" includes="*mozilla*1.1*.txt" />
											<sequential>
												<move file="@{licenseFile}" tofile="${licenses.output.dir}/mpl-1.1.txt" />
											</sequential>
										</for>
										<for param="licenseFile">
											<fileset dir="${licenses.output.dir}" includes="*publicdomain*.txt" />
											<sequential>
												<move file="@{licenseFile}" tofile="${licenses.output.dir}/cc-public-domain.txt" />
											</sequential>
										</for>
										<for param="licenseFile">
											<fileset dir="${licenses.output.dir}" includes="*w3c*.txt" />
											<sequential>
												<move file="@{licenseFile}" tofile="${licenses.output.dir}/w3c.html" />
											</sequential>
										</for>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>liferay</id>
			<properties>
				<integration.container>liferay</integration.container>
				<integration.context>/group/bridge-demos/alloy-showcase/-/component/</integration.context>
				<integration.sign.in.context>/web/guest/home</integration.sign.in.context>
			</properties>
		</profile>
		<profile>
			<id>pluto</id>
			<properties>
				<integration.container>pluto</integration.container>
				<integration.context>/pluto/portal</integration.context>
				<integration.sign.in.context>/pluto/portal</integration.sign.in.context>
			</properties>
		</profile>
		<profile>
			<id>war-license-packaging</id>
			<activation>
				<file>
					<exists>src/main/webapp/WEB-INF/web.xml</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>prepare-package</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Delete text files copied by add-third-party goal of license-maven-plugin -->
										<delete failonerror="false" verbose="true">
											<fileset dir="${project.build.outputDirectory}" includes="*.txt" />
										</delete>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<excludes>
							<exclude>META-INF/third-party-missing.*</exclude>
						</excludes>
					</resource>
				</resources>
			</build>
		</profile>
	</profiles>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-install-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<!-- Integration test dependencies. -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-chrome-driver</artifactId>
		</dependency>
		<dependency>
			<groupId>com.codeborne</groupId>
			<artifactId>phantomjsdriver</artifactId>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		<!-- End integration test dependencies. -->
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.seleniumhq.selenium</groupId>
				<artifactId>selenium-chrome-driver</artifactId>
				<version>2.53.0</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.seleniumhq.selenium</groupId>
				<artifactId>selenium-java</artifactId>
				<version>2.53.0</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<!-- Note: The official version of phantomjsdriver is under the groupId com.github.detro. However, the
				version of selenium that it depends on is old and conflicts with newer versions of selenium. The
				com.codeborne version that we are depending on is a patched version which works with newer versions of
				selenium. If a new official version of phantomjsdriver is ever released, we should probably switch to that.
				For more details, see this post: https://github.com/detro/ghostdriver/issues/397#issuecomment-65539540 -->
				<groupId>com.codeborne</groupId>
				<artifactId>phantomjsdriver</artifactId>
				<version>1.2.1</version>
				<scope>test</scope>
				<!-- Don't download the version of selenium that phantomjsdriver depends on since it is older than the
				version we specify. -->
				<exclusions>
					<exclusion>
						<artifactId>org.seleniumhq.selenium</artifactId>
						<groupId>selenium-java</groupId>
					</exclusion>
					<exclusion>
						<artifactId>org.seleniumhq.selenium</artifactId>
						<groupId>selenium-server</groupId>
					</exclusion>
					<exclusion>
						<artifactId>org.seleniumhq.selenium</artifactId>
						<groupId>selenium-remote-driver</groupId>
					</exclusion>
				</exclusions>
			</dependency>
		</dependencies>
	</dependencyManagement>

</project>
